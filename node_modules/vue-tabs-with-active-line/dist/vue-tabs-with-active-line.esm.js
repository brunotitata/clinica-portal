//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//
//

var script = {
  name: 'vue-tabs-with-active-line',
  props: {
    currentTab: {
      type: String,
      required: true,
    },
    tabs: {
      type: Array,
      required: true,
    },
    wrapperClass: {
      type: String,
      required: false,
    },
    tabClass: {
      type: String,
      required: false,
    },
    tabActiveClass: {
      type: String,
      required: false,
    },
    lineClass: {
      type: String,
      required: false,
    },
  },
  watch: {
    currentTab: function currentTab(newCurrentTab) {
      if (this.newTab === newCurrentTab) { return; }
      this.moveActiveLine(newCurrentTab);
    },
  },
  data: function () { return ({
    activeLineWidth: 0,
    activeLineOffset: 0,
    newTab: '',
  }); },
  methods: {
    handleClick: function handleClick(value) {
      this.$emit('onClick', value);
      this.moveActiveLine(value);

      this.newTab = value;
    },
    moveActiveLine: function moveActiveLine(newValue) {
      var element = this.$refs[newValue][0];
      if (!element) { return; }

      this.activeLineWidth = element.clientWidth;
      this.activeLineOffset = element.offsetLeft;
    },
  },
  mounted: function mounted() {
    this.moveActiveLine(this.currentTab);
  },
};

/* script */
            var __vue_script__ = script;
            
/* template */
var __vue_render__ = function() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c(
    "nav",
    { staticClass: "tabs", class: _vm.wrapperClass },
    [
      _vm._l(_vm.tabs, function(tab) {
        return _c(
          "button",
          {
            key: tab.title,
            ref: tab.value,
            refInFor: true,
            staticClass: "tabs__item",
            class: [
              { tabs__item_active: tab.value === _vm.currentTab },
              tab.value === _vm.currentTab && _vm.tabActiveClass
                ? _vm.tabActiveClass
                : "",
              _vm.tabClass
            ],
            attrs: { type: "button", disabled: tab.disabled || false },
            on: {
              click: function($event) {
                _vm.handleClick(tab.value);
              }
            }
          },
          [_vm._v("\n    " + _vm._s(tab.title) + "\n  ")]
        )
      }),
      _vm._v(" "),
      _c("div", {
        staticClass: "tabs__active-line",
        class: _vm.lineClass,
        style: {
          width: _vm.activeLineWidth + "px",
          transform: "translateX(" + _vm.activeLineOffset + "px)"
        }
      })
    ],
    2
  )
};
var __vue_staticRenderFns__ = [];
__vue_render__._withStripped = true;

  /* style */
  var __vue_inject_styles__ = undefined;
  /* scoped */
  var __vue_scope_id__ = undefined;
  /* module identifier */
  var __vue_module_identifier__ = undefined;
  /* functional template */
  var __vue_is_functional_template__ = false;
  /* component normalizer */
  function __vue_normalize__(
    template, style, script$$1,
    scope, functional, moduleIdentifier,
    createInjector, createInjectorSSR
  ) {
    var component = (typeof script$$1 === 'function' ? script$$1.options : script$$1) || {};

    // For security concerns, we use only base name in production mode.
    component.__file = "/Users/karambafe/job/libs/vue-tabs-with-active-line/src/VueTabsWithActiveLine.vue";

    if (!component.render) {
      component.render = template.render;
      component.staticRenderFns = template.staticRenderFns;
      component._compiled = true;

      if (functional) { component.functional = true; }
    }

    component._scopeId = scope;

    return component
  }
  /* style inject */
  
  /* style inject SSR */
  

  
  var component = __vue_normalize__(
    { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
    __vue_inject_styles__,
    __vue_script__,
    __vue_scope_id__,
    __vue_is_functional_template__,
    __vue_module_identifier__,
    undefined,
    undefined
  );

// Import vue component

// install function executed by Vue.use()
function install(Vue) {
  if (install.installed) { return; }
  install.installed = true;
  Vue.component('VueTabsWithActiveLine', component);
}

// Create module definition for Vue.use()
var plugin = {
  install: install,
};

// To auto-install when vue is found
/* global window global */
var GlobalVue = null;
if (typeof window !== 'undefined') {
  GlobalVue = window.Vue;
} else if (typeof global !== 'undefined') {
  GlobalVue = global.Vue;
}
if (GlobalVue) {
  GlobalVue.use(plugin);
}

// It's possible to expose named exports when writing components that can
// also be used as directives, etc. - eg. import { RollupDemoDirective } from 'rollup-demo';
// export const RollupDemoDirective = component;

export default component;
